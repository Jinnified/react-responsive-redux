{"version":3,"sources":["../src/redux.js"],"names":["SET_MOBILE_DETECT","setMobileDetect","phone","tablet","mobile","desktop","type","defaultSize","initialState","fakeWidth","responsiveReducer","state","action"],"mappings":";;;;;;;;;AAAA;;AAEA,IAAMA,oBAAoB,4CAA1B;;AAEO,IAAMC,4CAAkB,SAAlBA,eAAkB;AAAA,iFAAsC,EAAtC;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,MAAkBC,MAAlB,QAAkBA,MAAlB;AAAA,MAA0BC,OAA1B,QAA0BA,OAA1B;;AAAA,SAA8C,EAAEC,MAAMN,iBAAR,EAA2BE,YAA3B,EAAkCC,cAAlC,EAA0CC,cAA1C,EAAkDC,gBAAlD,EAA9C;AAAA,CAAxB;;AAEP;AACA;;AAEA;AACA,IAAME,cAAc,sBAAYJ,MAAZ,GAAqB,CAAzC;;AAEA,IAAMK,eAAe;AACnBN,SAAO,KADY;AAEnBC,UAAQ,KAFW;AAGnBC,UAAQ,KAHW;AAInBK,aAAWF;AAJQ,CAArB;;AAOO,IAAMG,gDAAoB,SAApBA,iBAAoB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACjE,UAAQA,OAAON,IAAf;AACE,SAAKN,iBAAL;AAAwB;AAAA,YACdI,MADc,GACqBQ,MADrB,CACdR,MADc;AAAA,YACND,MADM,GACqBS,MADrB,CACNT,MADM;AAAA,YACED,KADF,GACqBU,MADrB,CACEV,KADF;AAAA,YACSG,OADT,GACqBO,MADrB,CACSP,OADT;;AAEtB,YAAII,kBAAJ;;AAEA,YAAIL,MAAJ,EAAY;AACV,cAAIF,KAAJ,EAAW;AACTO,wBAAY,sBAAYP,KAAxB;AACD,WAFD,MAEO,IAAIC,MAAJ,EAAY;AACjBM,wBAAa,sBAAYN,MAAzB;AACD,WAFM,MAEA;AACH;AACAM,wBAAY,sBAAYP,KAAxB;AACD;AACF,SATH,MASS;AACLO,sBAAY,sBAAYN,MAAZ,GAAqB,CAAjC;AACD;AACD,4BAAYQ,KAAZ,IAAmBP,cAAnB,EAA2BD,cAA3B,EAAmCD,YAAnC,EAA0CG,gBAA1C,EAAmDI,oBAAnD;AACD;AACD;AACE,aAAOE,KAAP;AApBN;AAsBD,CAvBM","file":"redux.js","sourcesContent":["import { breakPoints } from './defaults'\n\nconst SET_MOBILE_DETECT = '@@react-responsive-redux/SET_MOBILE_DETECT'\n\nexport const setMobileDetect = ({ phone, tablet, mobile, desktop } = {}) => ({ type: SET_MOBILE_DETECT, phone, tablet, mobile, desktop })\n\n// TODO - allow users to pass this in - we have to share it with our components\n// too though so maybe we need a getter/setter on our entire class?\n\n// default to a desktop size if in doubt\nconst defaultSize = breakPoints.tablet + 1\n\nconst initialState = {\n  phone: false,\n  tablet: false,\n  mobile: false,\n  fakeWidth: defaultSize,\n}\n\nexport const responsiveReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_MOBILE_DETECT: {\n      const { mobile, tablet, phone, desktop } = action\n      let fakeWidth\n\n      if (mobile) {\n        if (phone) {\n          fakeWidth = breakPoints.phone\n        } else if (tablet) {\n          fakeWidth =  breakPoints.tablet\n        } else {\n            // TODO - should we ever get here? default to the lowest value i guess\n            fakeWidth = breakPoints.phone\n          }\n        } else {\n          fakeWidth = breakPoints.tablet + 1\n        }\n        return { ...state, mobile, tablet, phone, desktop, fakeWidth }\n      }\n      default:\n        return state\n  }\n}\n"]}