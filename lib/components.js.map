{"version":3,"sources":["../src/components.js"],"names":["responsiveWrapper","query","fakeWidth","state","responsive","props","dispatch","_other","other","Object","keys","values","deviceWidth","width","children","PhoneScreen","phone","TabletScreen","tablet","DesktopScreen","MobileScreen","PhoneScreenHidden","TabletScreenHidden","DesktopScreenHidden","MobileScreenHidden"],"mappings":";;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AAGA;;;;6NARA;;;AAOA;;;AAGO,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD;AAAA,SAAW,yBAC1C;AAAA,WAAU,EAAEC,WAAWC,MAAMC,UAAN,CAAiBF,SAA9B,EAAV;AAAA,GAD0C,EAE1C,YAAgB;AAAA,QAAfG,KAAe,uEAAP,EAAO;;AAChB;AADgB,QAERC,QAFQ,GAE2BD,KAF3B,CAERC,QAFQ;AAAA,QAEEJ,SAFF,GAE2BG,KAF3B,CAEEH,SAFF;AAAA,QAEgBK,MAFhB,4BAE2BF,KAF3B;AAGhB;AACA;;;AACA,QAAMG,QAAQ,sBAAKD,MAAL,EAAaE,OAAOC,IAAP,sBAAb,CAAd;AACA,QAAMC,SAAS,EAAEC,aAAaV,SAAf,EAA0BW,OAAOX,SAAjC,EAAf;AACA,WACE;AAAA;AAAA,eAAgB,EAACD,YAAD,EAAQU,cAAR,EAAhB,EAAqCH,KAArC;AACGH,YAAMS;AADT,KADF;AAKD,GAd2C,CAAX;AAAA,CAA1B;;;AAgBA,IAAMC,oCAAcf,mCAAiC,sBAAYgB,KAA7C,SAApB;AACA,IAAMC,sCAAejB,oCAAiC,sBAAYgB,KAAZ,GAAoB,CAArD,6BAA6E,sBAAYE,MAAzF,SAArB;AACA,IAAMC,wCAAgBnB,oCAAiC,sBAAYkB,MAAZ,GAAqB,CAAtD,UAAtB;AACA,IAAME,sCAAgBpB,mCAAiC,sBAAYkB,MAA7C,SAAtB;;AAEA,IAAMG,gDAAoBrB,oCAAiC,sBAAYgB,KAAZ,GAAoB,CAArD,UAA1B;AACA,IAAMM,kDAAqBtB,mCAAiC,sBAAYgB,KAA7C,4BAAwE,sBAAYE,MAAZ,GAAqB,CAA7F,UAA3B;AACA,IAAMK,oDAAsBvB,mCAAiC,sBAAYkB,MAA7C,SAA5B;AACA,IAAMM,kDAAqBxB,oCAAiC,sBAAYkB,MAAZ,GAAqB,CAAtD,UAA3B","file":"components.js","sourcesContent":["// see also components/ScreenSize for another way to consume this data\nimport React from 'react'\nimport MediaQuery from 'react-responsive'\nimport omit from 'lodash.omit'\nimport { connect } from 'react-redux'\nimport { breakPoints } from './defaults'\n\n// ugly ugly ugly ugly but how else can we get this? it's not exported publicly\nimport { features } from './mediaQuery'\n\nexport const responsiveWrapper = (query) => connect(\n  state => ({ fakeWidth: state.responsive.fakeWidth }),\n)((props = {}) => {\n  // eslint-disable-next-line no-unused-vars\n  const { dispatch, fakeWidth, ..._other } = props\n  // we're going to omit every prop that react-responsive responds to so\n  // our caller doesn't accidentally overwrite stuff\n  const other = omit(_other, Object.keys(features))\n  const values = { deviceWidth: fakeWidth, width: fakeWidth }\n  return (\n    <MediaQuery {...{query, values}} {...other}>\n      {props.children}\n    </MediaQuery>\n  )\n})\n\nexport const PhoneScreen = responsiveWrapper(`(max-width: ${breakPoints.phone}px)`)\nexport const TabletScreen = responsiveWrapper(`(min-width: ${breakPoints.phone + 1}px) and (max-width: ${breakPoints.tablet}px)`)\nexport const DesktopScreen = responsiveWrapper(`(min-width: ${breakPoints.tablet + 1}px)`)\nexport const MobileScreen =  responsiveWrapper(`(max-width: ${breakPoints.tablet}px)`)\n\nexport const PhoneScreenHidden = responsiveWrapper(`(min-width: ${breakPoints.phone + 1}px)`)\nexport const TabletScreenHidden = responsiveWrapper(`(max-width: ${breakPoints.phone}px) or (min-width: ${breakPoints.tablet + 1}px)`)\nexport const DesktopScreenHidden = responsiveWrapper(`(max-width: ${breakPoints.tablet}px)`)\nexport const MobileScreenHidden = responsiveWrapper(`(min-width: ${breakPoints.tablet + 1}px)`)\n"]}