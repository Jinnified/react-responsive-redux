{"version":3,"sources":["../src/mediaQuery.js"],"names":["stringOrNumber","oneOfType","string","number","matchers","orientation","oneOf","scan","aspectRatio","deviceAspectRatio","height","deviceHeight","width","deviceWidth","color","bool","colorIndex","monochrome","resolution","features","minAspectRatio","maxAspectRatio","minDeviceAspectRatio","maxDeviceAspectRatio","minHeight","maxHeight","minDeviceHeight","maxDeviceHeight","minWidth","maxWidth","minDeviceWidth","maxDeviceWidth","minColor","maxColor","minColorIndex","maxColorIndex","minMonochrome","maxMonochrome","minResolution","maxResolution","types","all","grid","aural","braille","handheld","print","projection","screen","tty","tv","embossed","type","Object","keys"],"mappings":";;;;;;;kQAAA;;;AACA;;AACA;;;;;;AAEA,IAAMA,iBAAiB,oBAAUC,SAAV,CAAoB,CACzC,oBAAUC,MAD+B,EAEzC,oBAAUC,MAF+B,CAApB,CAAvB;;AAKA;AACA,IAAMC,WAAW;AACfC,eAAa,oBAAUC,KAAV,CAAgB,CAC3B,UAD2B,EAE3B,WAF2B,CAAhB,CADE;;AAMfC,QAAM,oBAAUD,KAAV,CAAgB,CACpB,aADoB,EAEpB,WAFoB,CAAhB,CANS;;AAWfE,eAAa,oBAAUN,MAXR;AAYfO,qBAAmB,oBAAUP,MAZd;;AAcfQ,UAAQV,cAdO;AAefW,gBAAcX,cAfC;;AAiBfY,SAAOZ,cAjBQ;AAkBfa,eAAab,cAlBE;;AAoBfc,SAAO,oBAAUC,IApBF;;AAsBfC,cAAY,oBAAUD,IAtBP;;AAwBfE,cAAY,oBAAUF,IAxBP;AAyBfG,cAAYlB;;AAGd;AA5BiB,CAAjB,CA6BA,IAAMmB;AACJC,kBAAgB,oBAAUlB,MADtB;AAEJmB,kBAAgB,oBAAUnB,MAFtB;AAGJoB,wBAAsB,oBAAUpB,MAH5B;AAIJqB,wBAAsB,oBAAUrB,MAJ5B;;AAMJsB,aAAWxB,cANP;AAOJyB,aAAWzB,cAPP;AAQJ0B,mBAAiB1B,cARb;AASJ2B,mBAAiB3B,cATb;;AAWJ4B,YAAU5B,cAXN;AAYJ6B,YAAU7B,cAZN;AAaJ8B,kBAAgB9B,cAbZ;AAcJ+B,kBAAgB/B,cAdZ;;AAgBJgC,YAAU,oBAAU7B,MAhBhB;AAiBJ8B,YAAU,oBAAU9B,MAjBhB;;AAmBJ+B,iBAAe,oBAAU/B,MAnBrB;AAoBJgC,iBAAe,oBAAUhC,MApBrB;;AAsBJiC,iBAAe,oBAAUjC,MAtBrB;AAuBJkC,iBAAe,oBAAUlC,MAvBrB;;AAyBJmC,iBAAetC,cAzBX;AA0BJuC,iBAAevC;;AA1BX,GA4BDI,QA5BC,CAAN;;AA+BA;AACA,IAAMoC,QAAQ;AACZC,OAAK,oBAAU1B,IADH;AAEZ2B,QAAM,oBAAU3B,IAFJ;AAGZ4B,SAAO,oBAAU5B,IAHL;AAIZ6B,WAAS,oBAAU7B,IAJP;AAKZ8B,YAAU,oBAAU9B,IALR;AAMZ+B,SAAO,oBAAU/B,IANL;AAOZgC,cAAY,oBAAUhC,IAPV;AAQZiC,UAAQ,oBAAUjC,IARN;AASZkC,OAAK,oBAAUlC,IATH;AAUZmC,MAAI,oBAAUnC,IAVF;AAWZoC,YAAU,oBAAUpC;AAXR,CAAd;;AAcA,IAAM0B,mBAAWD,KAAX,EAAqBrB,QAArB,CAAN;;AAEA;AACAf,SAASgD,IAAT,GAAgBC,OAAOC,IAAP,CAAYd,KAAZ,CAAhB;;QAGEC,G,GAAAA,G;QACAD,K,GAAAA,K;QACApC,Q,GAAAA,Q;QACAe,Q,GAAAA,Q","file":"mediaQuery.js","sourcesContent":["// from https://raw.githubusercontent.com/contra/react-responsive/master/src/mediaQuery.js\nimport 'react'\nimport PropTypes from 'prop-types'\n\nconst stringOrNumber = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n])\n\n// properties that match media queries\nconst matchers = {\n  orientation: PropTypes.oneOf([\n    'portrait',\n    'landscape',\n  ]),\n\n  scan: PropTypes.oneOf([\n    'progressive',\n    'interlace',\n  ]),\n\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n\n  color: PropTypes.bool,\n\n  colorIndex: PropTypes.bool,\n\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber,\n}\n\n// media features\nconst features = {\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber,\n\n  ...matchers,\n}\n\n// media types\nconst types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool,\n}\n\nconst all = { ...types, ...features }\n\n// add the type property\nmatchers.type = Object.keys(types)\n\nexport {\n  all,\n  types,\n  matchers,\n  features,\n}\n"]}