{"version":3,"sources":["../src/components.js"],"names":["React","MediaQuery","connect","breakPoints","MediaQueryWrapper","props","dispatch","fakeWidth","other","values","deviceWidth","width","children","responsiveWrapper","state","responsive","PhoneScreen","maxWidth","phone","TabletScreen","query","tablet","DesktopScreen","minWidth","MobileScreen","PhoneScreenHidden","TabletScreenHidden","DesktopScreenHidden","MobileScreenHidden"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAEA,IAAMC,oBAAoB,SAApBA,iBAAoB,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;;AACxC;AADwC,MAEhCC,QAFgC,GAEED,KAFF,CAEhCC,QAFgC;AAAA,MAEtBC,SAFsB,GAEEF,KAFF,CAEtBE,SAFsB;AAAA,MAERC,KAFQ,4BAEEH,KAFF;;AAGxC,MAAMI,SAAS,EAAEC,aAAaH,SAAf,EAA0BI,OAAOJ,SAAjC,EAAf;AACA,SACE;AAAC,cAAD;AAAA,iBAAgBC,KAAhB,EAA2B,EAACC,cAAD,EAA3B;AACGJ,UAAMO;AADT,GADF;AAKD,CATD;;AAWA,OAAO,IAAMC,oBAAoB,SAApBA,iBAAoB;AAAA,MAACR,KAAD,uEAAS,EAAT;AAAA,SAAgBH,QAAQ;AAAA,sBAAYK,WAAWO,MAAMC,UAAN,CAAiBR,SAAxC,IAAsDF,KAAtD;AAAA,GAAR,EAAwED,iBAAxE,CAAhB;AAAA,CAA1B;;AAEP,OAAO,IAAMY,cAAcH,kBAAkB,EAAEI,UAAUd,YAAYe,KAAxB,EAAlB,CAApB;AACP,OAAO,IAAMC,eAAeN,kBAAkB,EAAEO,yBAAsBjB,YAAYe,KAAZ,GAAoB,CAA1C,6BAAkEf,YAAYkB,MAA9E,QAAF,EAAlB,CAArB;AACP,OAAO,IAAMC,gBAAgBT,kBAAkB,EAAEU,UAAUpB,YAAYkB,MAAZ,GAAqB,CAAjC,EAAlB,CAAtB;AACP,OAAO,IAAMG,eAAgBX,kBAAkB,EAAEI,UAAUd,YAAYkB,MAAxB,EAAlB,CAAtB;;AAEP,OAAO,IAAMI,oBAAoBZ,kBAAkB,EAAEU,UAAUpB,YAAYe,KAAZ,GAAoB,CAAhC,EAAlB,CAA1B;AACP,OAAO,IAAMQ,qBAAqBb,kBAAkB,EAAEO,wBAAsBjB,YAAYe,KAAlC,4BAA6Df,YAAYkB,MAAZ,GAAqB,CAAlF,SAAF,EAAlB,CAA3B;AACP,OAAO,IAAMM,sBAAsBd,kBAAkB,EAAEI,UAAUd,YAAYkB,MAAxB,EAAlB,CAA5B;AACP,OAAO,IAAMO,qBAAqBf,kBAAkB,EAAEU,UAAUpB,YAAYkB,MAAZ,GAAqB,CAAjC,EAAlB,CAA3B","file":"components.js","sourcesContent":["// see also components/ScreenSize for another way to consume this data\nimport React from 'react'\nimport MediaQuery from 'react-responsive'\nimport { connect } from 'react-redux'\nimport { breakPoints } from './defaults'\n\nconst MediaQueryWrapper = (props = {}) => {\n  // eslint-disable-next-line no-unused-vars\n  const { dispatch, fakeWidth, ...other } = props\n  const values = { deviceWidth: fakeWidth, width: fakeWidth }\n  return (\n    <MediaQuery {...other} {...{values}} >\n      {props.children}\n    </MediaQuery>\n  )\n}\n\nexport const responsiveWrapper = (props = {}) => connect(state => ({ fakeWidth: state.responsive.fakeWidth, ...props }))(MediaQueryWrapper)\n\nexport const PhoneScreen = responsiveWrapper({ maxWidth: breakPoints.phone })\nexport const TabletScreen = responsiveWrapper({ query: `(min-width: ${breakPoints.phone + 1}px) and (max-width: ${breakPoints.tablet}px)` })\nexport const DesktopScreen = responsiveWrapper({ minWidth: breakPoints.tablet + 1 })\nexport const MobileScreen =  responsiveWrapper({ maxWidth: breakPoints.tablet })\n\nexport const PhoneScreenHidden = responsiveWrapper({ minWidth: breakPoints.phone + 1 })\nexport const TabletScreenHidden = responsiveWrapper({ query: `(max-width: ${breakPoints.phone}px) or (min-width: ${breakPoints.tablet + 1}px)` })\nexport const DesktopScreenHidden = responsiveWrapper({ maxWidth: breakPoints.tablet })\nexport const MobileScreenHidden = responsiveWrapper({ minWidth: breakPoints.tablet + 1 })\n"]}