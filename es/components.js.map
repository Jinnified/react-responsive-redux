{"version":3,"sources":["../src/components.js"],"names":["React","MediaQuery","omit","connect","breakPoints","features","responsiveWrapper","query","fakeWidth","state","responsive","props","dispatch","_other","other","Object","keys","values","deviceWidth","width","children","PhoneScreen","phone","TabletScreen","tablet","DesktopScreen","MobileScreen","PhoneScreenHidden","TabletScreenHidden","DesktopScreenHidden","MobileScreenHidden"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAEA;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEO,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACC,KAAD;AAAA,SAAWJ,QAC1C;AAAA,WAAU,EAAEK,WAAWC,MAAMC,UAAN,CAAiBF,SAA9B,EAAV;AAAA,GAD0C,EAE1C,YAAgB;AAAA,QAAfG,KAAe,uEAAP,EAAO;;AAChB;AADgB,QAERC,QAFQ,GAE2BD,KAF3B,CAERC,QAFQ;AAAA,QAEEJ,SAFF,GAE2BG,KAF3B,CAEEH,SAFF;AAAA,QAEgBK,MAFhB,4BAE2BF,KAF3B;AAGhB;AACA;;;AACA,QAAMG,QAAQZ,KAAKW,MAAL,EAAaE,OAAOC,IAAP,CAAYX,QAAZ,CAAb,CAAd;AACA,QAAMY,SAAS,EAAEC,aAAaV,SAAf,EAA0BW,OAAOX,SAAjC,EAAf;AACA,WACE;AAAC,gBAAD;AAAA,eAAgB,EAACD,YAAD,EAAQU,cAAR,EAAhB,EAAqCH,KAArC;AACGH,YAAMS;AADT,KADF;AAKD,GAd2C,CAAX;AAAA,CAA1B;;;AAgBP,OAAO,IAAMC,cAAcf,mCAAiCF,YAAYkB,KAA7C,SAApB;AACP,OAAO,IAAMC,eAAejB,oCAAiCF,YAAYkB,KAAZ,GAAoB,CAArD,6BAA6ElB,YAAYoB,MAAzF,SAArB;AACP,OAAO,IAAMC,gBAAgBnB,oCAAiCF,YAAYoB,MAAZ,GAAqB,CAAtD,UAAtB;AACP,OAAO,IAAME,eAAgBpB,mCAAiCF,YAAYoB,MAA7C,SAAtB;;AAEP,OAAO,IAAMG,oBAAoBrB,oCAAiCF,YAAYkB,KAAZ,GAAoB,CAArD,UAA1B;AACP,OAAO,IAAMM,qBAAqBtB,mCAAiCF,YAAYkB,KAA7C,4BAAwElB,YAAYoB,MAAZ,GAAqB,CAA7F,UAA3B;AACP,OAAO,IAAMK,sBAAsBvB,mCAAiCF,YAAYoB,MAA7C,SAA5B;AACP,OAAO,IAAMM,qBAAqBxB,oCAAiCF,YAAYoB,MAAZ,GAAqB,CAAtD,UAA3B","file":"components.js","sourcesContent":["// see also components/ScreenSize for another way to consume this data\nimport React from 'react'\nimport MediaQuery from 'react-responsive'\nimport omit from 'lodash.omit'\nimport { connect } from 'react-redux'\nimport { breakPoints } from './defaults'\n\n// ugly ugly ugly ugly but how else can we get this? it's not exported publicly\nimport { features } from './mediaQuery'\n\nexport const responsiveWrapper = (query) => connect(\n  state => ({ fakeWidth: state.responsive.fakeWidth }),\n)((props = {}) => {\n  // eslint-disable-next-line no-unused-vars\n  const { dispatch, fakeWidth, ..._other } = props\n  // we're going to omit every prop that react-responsive responds to so\n  // our caller doesn't accidentally overwrite stuff\n  const other = omit(_other, Object.keys(features))\n  const values = { deviceWidth: fakeWidth, width: fakeWidth }\n  return (\n    <MediaQuery {...{query, values}} {...other}>\n      {props.children}\n    </MediaQuery>\n  )\n})\n\nexport const PhoneScreen = responsiveWrapper(`(max-width: ${breakPoints.phone}px)`)\nexport const TabletScreen = responsiveWrapper(`(min-width: ${breakPoints.phone + 1}px) and (max-width: ${breakPoints.tablet}px)`)\nexport const DesktopScreen = responsiveWrapper(`(min-width: ${breakPoints.tablet + 1}px)`)\nexport const MobileScreen =  responsiveWrapper(`(max-width: ${breakPoints.tablet}px)`)\n\nexport const PhoneScreenHidden = responsiveWrapper(`(min-width: ${breakPoints.phone + 1}px)`)\nexport const TabletScreenHidden = responsiveWrapper(`(max-width: ${breakPoints.phone}px) or (min-width: ${breakPoints.tablet + 1}px)`)\nexport const DesktopScreenHidden = responsiveWrapper(`(max-width: ${breakPoints.tablet}px)`)\nexport const MobileScreenHidden = responsiveWrapper(`(min-width: ${breakPoints.tablet + 1}px)`)\n"]}