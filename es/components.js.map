{"version":3,"sources":["../src/components.js"],"names":["React","PropTypes","MediaQuery","connect","breakPoints","MediaQueryWrapper","props","dispatch","fakeWidth","children","other","values","deviceWidth","width","propTypes","node","isRequired","func","number","responsiveWrapper","state","responsive","PhoneScreen","maxWidth","phone","TabletScreen","query","tablet","DesktopScreen","minWidth","MobileScreen","PhoneScreenHidden","TabletScreenHidden","DesktopScreenHidden","MobileScreenHidden"],"mappings":";;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAEO,IAAMC,oBAAoB,SAApBA,iBAAoB,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;;AAC/C;AAD+C,MAEvCC,QAFuC,GAEKD,KAFL,CAEvCC,QAFuC;AAAA,MAE7BC,SAF6B,GAEKF,KAFL,CAE7BE,SAF6B;AAAA,MAElBC,QAFkB,GAEKH,KAFL,CAElBG,QAFkB;AAAA,MAELC,KAFK,4BAEKJ,KAFL;;AAG/C,MAAMK,SAAS,EAAEC,aAAaJ,SAAf,EAA0BK,OAAOL,SAAjC,EAAf;AACA,SACE;AAAC,cAAD;AAAA,iBAAgBE,KAAhB,EAA2B,EAAEC,cAAF,EAA3B;AACGF;AADH,GADF;AAKD,CATM;;;AAWPJ,kBAAkBS,SAAlB,GAA8B;AAC5BL,YAAUR,UAAUc,IAAV,CAAeC,UADG;AAE5BT,YAAUN,UAAUgB,IAAV,CAAeD,UAFG;AAG5BR,aAAWP,UAAUiB,MAAV,CAAiBF;AAHA,CAA9B;;AAMA,OAAO,IAAMG,oBAAoB,SAApBA,iBAAoB;AAAA,MAACb,KAAD,uEAAS,EAAT;AAAA,SAC/BH,QAAQ;AAAA,sBAAYK,WAAWY,MAAMC,UAAN,CAAiBb,SAAxC,IAAsDF,KAAtD;AAAA,GAAR,EAAwED,iBAAxE,CAD+B;AAAA,CAA1B;;AAGP,OAAO,IAAMiB,cAAcH,kBAAkB,EAAEI,UAAUnB,YAAYoB,KAAxB,EAAlB,CAApB;AACP,OAAO,IAAMC,eAAeN,kBAAkB,EAAEO,yBAAsBtB,YAAYoB,KAAZ,GAAoB,CAA1C,6BAAkEpB,YAAYuB,MAA9E,QAAF,EAAlB,CAArB;AACP,OAAO,IAAMC,gBAAgBT,kBAAkB,EAAEU,UAAUzB,YAAYuB,MAAZ,GAAqB,CAAjC,EAAlB,CAAtB;AACP,OAAO,IAAMG,eAAeX,kBAAkB,EAAEI,UAAUnB,YAAYuB,MAAxB,EAAlB,CAArB;;AAEP,OAAO,IAAMI,oBAAoBZ,kBAAkB,EAAEU,UAAUzB,YAAYoB,KAAZ,GAAoB,CAAhC,EAAlB,CAA1B;AACP,OAAO,IAAMQ,qBAAqBb,kBAAkB,EAAEO,wBAAsBtB,YAAYoB,KAAlC,0BAA2DpB,YAAYuB,MAAZ,GAAqB,CAAhF,SAAF,EAAlB,CAA3B;AACP,OAAO,IAAMM,sBAAsBd,kBAAkB,EAAEI,UAAUnB,YAAYuB,MAAxB,EAAlB,CAA5B;AACP,OAAO,IAAMO,qBAAqBf,kBAAkB,EAAEU,UAAUzB,YAAYuB,MAAZ,GAAqB,CAAjC,EAAlB,CAA3B","file":"components.js","sourcesContent":["// see also components/ScreenSize for another way to consume this data\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport MediaQuery from 'react-responsive'\nimport { connect } from 'react-redux'\nimport { breakPoints } from './defaults'\n\nexport const MediaQueryWrapper = (props = {}) => {\n  // eslint-disable-next-line no-unused-vars\n  const { dispatch, fakeWidth, children, ...other } = props\n  const values = { deviceWidth: fakeWidth, width: fakeWidth }\n  return (\n    <MediaQuery {...other} {...{ values }} >\n      {children}\n    </MediaQuery>\n  )\n}\n\nMediaQueryWrapper.propTypes = {\n  children: PropTypes.node.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  fakeWidth: PropTypes.number.isRequired,\n}\n\nexport const responsiveWrapper = (props = {}) =>\n  connect(state => ({ fakeWidth: state.responsive.fakeWidth, ...props }))(MediaQueryWrapper)\n\nexport const PhoneScreen = responsiveWrapper({ maxWidth: breakPoints.phone })\nexport const TabletScreen = responsiveWrapper({ query: `(min-width: ${breakPoints.phone + 1}px) and (max-width: ${breakPoints.tablet}px)` })\nexport const DesktopScreen = responsiveWrapper({ minWidth: breakPoints.tablet + 1 })\nexport const MobileScreen = responsiveWrapper({ maxWidth: breakPoints.tablet })\n\nexport const PhoneScreenHidden = responsiveWrapper({ minWidth: breakPoints.phone + 1 })\nexport const TabletScreenHidden = responsiveWrapper({ query: `(max-width: ${breakPoints.phone}px), (min-width: ${breakPoints.tablet + 1}px)` })\nexport const DesktopScreenHidden = responsiveWrapper({ maxWidth: breakPoints.tablet })\nexport const MobileScreenHidden = responsiveWrapper({ minWidth: breakPoints.tablet + 1 })\n"]}